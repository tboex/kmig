// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: kmig.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Kmig_StartSinglePlayerGame_FullMethodName = "/kmig.Kmig/StartSinglePlayerGame"
	Kmig_StartMultiplayerGame_FullMethodName  = "/kmig.Kmig/StartMultiplayerGame"
	Kmig_JoinMultiplayerGame_FullMethodName   = "/kmig.Kmig/JoinMultiplayerGame"
	Kmig_SubmitWord_FullMethodName            = "/kmig.Kmig/SubmitWord"
	Kmig_GetGameState_FullMethodName          = "/kmig.Kmig/GetGameState"
)

// KmigClient is the client API for Kmig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service Definition
type KmigClient interface {
	// Singleplayer
	StartSinglePlayerGame(ctx context.Context, in *SinglePlayerRequest, opts ...grpc.CallOption) (*WordSubmissionResponse, error)
	// Multiplayer
	StartMultiplayerGame(ctx context.Context, in *MultiplayerRequest, opts ...grpc.CallOption) (*MultiplayerResponse, error)
	JoinMultiplayerGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// General Actions
	SubmitWord(ctx context.Context, in *WordSubmission, opts ...grpc.CallOption) (*WordSubmissionResponse, error)
	GetGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*GameStateResponse, error)
}

type kmigClient struct {
	cc grpc.ClientConnInterface
}

func NewKmigClient(cc grpc.ClientConnInterface) KmigClient {
	return &kmigClient{cc}
}

func (c *kmigClient) StartSinglePlayerGame(ctx context.Context, in *SinglePlayerRequest, opts ...grpc.CallOption) (*WordSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WordSubmissionResponse)
	err := c.cc.Invoke(ctx, Kmig_StartSinglePlayerGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmigClient) StartMultiplayerGame(ctx context.Context, in *MultiplayerRequest, opts ...grpc.CallOption) (*MultiplayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiplayerResponse)
	err := c.cc.Invoke(ctx, Kmig_StartMultiplayerGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmigClient) JoinMultiplayerGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, Kmig_JoinMultiplayerGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmigClient) SubmitWord(ctx context.Context, in *WordSubmission, opts ...grpc.CallOption) (*WordSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WordSubmissionResponse)
	err := c.cc.Invoke(ctx, Kmig_SubmitWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmigClient) GetGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*GameStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameStateResponse)
	err := c.cc.Invoke(ctx, Kmig_GetGameState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KmigServer is the server API for Kmig service.
// All implementations must embed UnimplementedKmigServer
// for forward compatibility.
//
// Service Definition
type KmigServer interface {
	// Singleplayer
	StartSinglePlayerGame(context.Context, *SinglePlayerRequest) (*WordSubmissionResponse, error)
	// Multiplayer
	StartMultiplayerGame(context.Context, *MultiplayerRequest) (*MultiplayerResponse, error)
	JoinMultiplayerGame(context.Context, *JoinRequest) (*JoinResponse, error)
	// General Actions
	SubmitWord(context.Context, *WordSubmission) (*WordSubmissionResponse, error)
	GetGameState(context.Context, *GameStateRequest) (*GameStateResponse, error)
	mustEmbedUnimplementedKmigServer()
}

// UnimplementedKmigServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKmigServer struct{}

func (UnimplementedKmigServer) StartSinglePlayerGame(context.Context, *SinglePlayerRequest) (*WordSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSinglePlayerGame not implemented")
}
func (UnimplementedKmigServer) StartMultiplayerGame(context.Context, *MultiplayerRequest) (*MultiplayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMultiplayerGame not implemented")
}
func (UnimplementedKmigServer) JoinMultiplayerGame(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMultiplayerGame not implemented")
}
func (UnimplementedKmigServer) SubmitWord(context.Context, *WordSubmission) (*WordSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWord not implemented")
}
func (UnimplementedKmigServer) GetGameState(context.Context, *GameStateRequest) (*GameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedKmigServer) mustEmbedUnimplementedKmigServer() {}
func (UnimplementedKmigServer) testEmbeddedByValue()              {}

// UnsafeKmigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KmigServer will
// result in compilation errors.
type UnsafeKmigServer interface {
	mustEmbedUnimplementedKmigServer()
}

func RegisterKmigServer(s grpc.ServiceRegistrar, srv KmigServer) {
	// If the following call pancis, it indicates UnimplementedKmigServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Kmig_ServiceDesc, srv)
}

func _Kmig_StartSinglePlayerGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmigServer).StartSinglePlayerGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kmig_StartSinglePlayerGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmigServer).StartSinglePlayerGame(ctx, req.(*SinglePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kmig_StartMultiplayerGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmigServer).StartMultiplayerGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kmig_StartMultiplayerGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmigServer).StartMultiplayerGame(ctx, req.(*MultiplayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kmig_JoinMultiplayerGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmigServer).JoinMultiplayerGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kmig_JoinMultiplayerGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmigServer).JoinMultiplayerGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kmig_SubmitWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmigServer).SubmitWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kmig_SubmitWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmigServer).SubmitWord(ctx, req.(*WordSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kmig_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmigServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kmig_GetGameState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmigServer).GetGameState(ctx, req.(*GameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kmig_ServiceDesc is the grpc.ServiceDesc for Kmig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kmig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kmig.Kmig",
	HandlerType: (*KmigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSinglePlayerGame",
			Handler:    _Kmig_StartSinglePlayerGame_Handler,
		},
		{
			MethodName: "StartMultiplayerGame",
			Handler:    _Kmig_StartMultiplayerGame_Handler,
		},
		{
			MethodName: "JoinMultiplayerGame",
			Handler:    _Kmig_JoinMultiplayerGame_Handler,
		},
		{
			MethodName: "SubmitWord",
			Handler:    _Kmig_SubmitWord_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _Kmig_GetGameState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kmig.proto",
}
